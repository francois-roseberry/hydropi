# See more about dockerfile templates here: https://www.balena.io/docs/learn/develop/dockerfile/
# and about balena base images here: https://www.balena.io/docs/reference/base-images/base-images/

# https://hub.docker.com/r/balenalib/raspberry-pi-node
FROM balenalib/%%BALENA_MACHINE_NAME%%-node:6

# Install node-gyp dependencies (Python, G++ and Make)
RUN apt-get update && apt-get install -y python make g++

# Defines our working directory in container
WORKDIR /usr/src/app

# Copies the package.json first for better cache on later pushes
COPY package.json package.json
COPY server/package.json server/package.json
COPY client/package.json client/package.json

# This install npm dependencies on the resin.io build server,
# making sure to clean up the artifacts it creates in order to reduce the image size.
RUN JOBS=MAX npm install --production --unsafe-perm && npm cache clean && rm -rf /tmp/*
RUN JOBS=MAX npm install --prefix ./server --production --unsafe-perm ./server && npm cache clean && rm -rf /tmp/*
RUN JOBS=MAX npm install --prefix ./client --production --unsafe-perm ./client && npm cache clean && rm -rf /tmp/*

# This will copy all files in our root to the working  directory in the container
COPY . ./

# Build the client App
RUN JOBS=MAX npm run client:build

# Enable udevd so that plugged dynamic hardware devices show up in our container.
ENV UDEV=1

# server.js will run when container starts up on the device
CMD ["npm", "start"]
